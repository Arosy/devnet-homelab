- name: create portainer stack for vaultwarden
  hosts: all
  remote_user: "{{ssh_user}}"
  gather_facts: no
  vars:
    stack_name: "vault"
  tasks:
#---------------------------------------------------------------------------------------------
  - name: "authenticate with portainer api"
    uri:
      url: "{{portainer_host}}/api/auth"
      method: POST
      headers:
        Content-Type: "application/json"
      body_format: json
      body:
        username: "{{ portainer_user }}"
        password: "{{ portainer_pass }}"
    register: auth_response
    changed_when: false
    ignore_errors: true
#---------------------------------------------------------------------------------------------
  - name: "check authentication response"
    fail:
      msg: "failed to authenticate with portainer api"
    when: "auth_response.status != 200"
#---------------------------------------------------------------------------------------------
  - name: "get jwt token from authentication response"
    set_fact:
      jwt_token: "{{auth_response.json.jwt}}"
    when: auth_response.status == 200
#---------------------------------------------------------------------------------------------
  - name: "get endpoints from portainer"
    uri:
      url: "{{portainer_host}}/api/endpoints"
      method: GET
      headers:
        Authorization: "Bearer {{jwt_token}}"
    register: get_endpoints
    when: jwt_token is defined
#---------------------------------------------------------------------------------------------
  - name: 'checking if portainer is initialized correctly'
    fail:
      msg: "portainer seems to be freshly installed, please login manually once at: http://{{ansible_host}}:9000 and after that execute this script again."
    when: jwt_token is defined and not get_endpoints.json is search("Id")
#---------------------------------------------------------------------------------------------
  - name: "get stack information from portainer"
    uri:
      url: "{{portainer_host}}/api/stacks"
      method: GET
      headers:
        Authorization: "Bearer {{jwt_token}}"
    register: get_stack_response
    when: jwt_token is defined
#---------------------------------------------------------------------------------------------
  - name: "check if the stack exists"
    set_fact:
      stack_not_exists: "{{response_data | json_query('[?Name == `'+ stack_name +'`]') | length <= 0}}"
    vars:
      response_data: "{{get_stack_response.json}}"
#---------------------------------------------------------------------------------------------
  - name: "setup folder for container data"
    file:
      path: "{{DATA_DIRECTORY}}/{{stack_name}}"
      state: directory
      owner: "{{ssh_user}}"
      group: "{{ssh_user}}"
      mode: '0755'
    when: jwt_token is defined and stack_not_exists
    ignore_errors: true
#---------------------------------------------------------------------------------------------
  - name: "create a stack in portainer"
    uri:
      url: "{{portainer_host}}/api/stacks/create/standalone/string?endpointId={{get_endpoints.json[0].Id}}"
      method: POST
      headers:
        Content-Type: "application/json"
        Authorization: "Bearer {{jwt_token}}"
      body_format: json
      body:
        name: "{{stack_name}}"
        fromAppTemplate: false
        StackFileContent: |
          version: '3'
          networks:
            home:
              external: true
          services:
            {{stack_name}}:
              container_name: {{stack_name}}
              image: vaultwarden/server:1.27.0
              restart: unless-stopped
              environment:
                - ROCKET_TLS={certs="/ssl/cert.pem",key="/ssl/key.pem"}
                - ADMIN_TOKEN={{vault_pass}}
              volumes:
                - {{DATA_DIRECTORY}}/{{stack_name}}:/data
                - {{DATA_DIRECTORY}}/ssl:/ssl
              networks:
                - home
              labels:
                - homepage.group=Main
                - homepage.name=Vaultwarden
                - homepage.icon=bitwarden.png
                - homepage.href=http://{{stack_name}}.home
                - homepage.description=Password Manager
                - traefik.http.routers.{{stack_name}}.entrypoints=web
                - traefik.http.routers.{{stack_name}}.middlewares={{stack_name}}
                - traefik.http.middlewares.{{stack_name}}.redirectregex.regex=(.*)
                - traefik.http.middlewares.{{stack_name}}.redirectregex.replacement=https://{{stack_name}}.home:8088
                - traefik.http.middlewares.{{stack_name}}.redirectregex.permanent=false
                - traefik.http.routers.{{stack_name}}.rule=Host(`{{stack_name}}.home`)
    register: create_stack_response
    when: jwt_token is defined and stack_not_exists
#---------------------------------------------------------------------------------------------
